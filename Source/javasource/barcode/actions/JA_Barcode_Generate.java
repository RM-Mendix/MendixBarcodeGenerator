// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package barcode.actions;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.util.EnumMap;
import java.util.Map;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.exception.ExceptionUtils;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.Writer;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageConfig;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.datamatrix.DataMatrixWriter;
import com.google.zxing.oned.CodaBarWriter;
import com.google.zxing.oned.Code128Writer;
import com.google.zxing.oned.Code39Writer;
import com.google.zxing.oned.Code93Writer;
import com.google.zxing.oned.EAN13Writer;
import com.google.zxing.oned.EAN8Writer;
import com.google.zxing.oned.ITFWriter;
import com.google.zxing.oned.UPCAWriter;
import com.google.zxing.oned.UPCEWriter;
import com.google.zxing.aztec.AztecWriter;
import com.google.zxing.pdf417.PDF417Writer;
import com.google.zxing.qrcode.QRCodeWriter;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class JA_Barcode_Generate extends CustomJavaAction<java.lang.Boolean>
{
	private IMendixObject __Image;
	private system.proxies.Image Image;
	private IMendixObject __Barcode;
	private barcode.proxies.Barcode Barcode;

	public JA_Barcode_Generate(IContext context, IMendixObject Image, IMendixObject Barcode)
	{
		super(context);
		this.__Image = Image;
		this.__Barcode = Barcode;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.Image = __Image == null ? null : system.proxies.Image.initialize(getContext(), __Image);

		this.Barcode = __Barcode == null ? null : barcode.proxies.Barcode.initialize(getContext(), __Barcode);

		// BEGIN USER CODE
		if (this.Barcode == null)
			throw new IllegalArgumentException("no barcode object passed to function");
		if (StringUtils.isEmpty(this.Barcode.getBarcodeContent())) {
			logError("no content found to write to barcode, exiting");
			return false;
		} else {
			try {
				
				ByteArrayOutputStream out = new ByteArrayOutputStream();
				if (this.Barcode.getuseTransparentBackground() && allowTransparentBackground(this.Barcode)) {
					MatrixToImageConfig matrixToImageConfig = new MatrixToImageConfig(0xFF000000, 0x00FFFFFF);
					MatrixToImageWriter.writeToStream(getBitMatrix(this.Barcode), getFileType(this.Barcode), out, matrixToImageConfig);
				} else {
					MatrixToImageWriter.writeToStream(getBitMatrix(this.Barcode), getFileType(this.Barcode), out);
				}
				byte[] byteArr = out.toByteArray();
				out.close();
				this.Image.setName("barcode." + getFileType(this.Barcode));
				Core.storeFileDocumentContent(getContext(), Image.getMendixObject(), new ByteArrayInputStream(byteArr));
				return true;
			} catch (Exception e) {
				logError(e.toString() + "\nStacktrace: " + ExceptionUtils.getFullStackTrace(e));
				return false;
			}
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_Barcode_Generate";
	}

	// BEGIN EXTRA CODE
	public static void logInfo(String msg) {
		Core.getLogger(barcode.proxies.constants.Constants.getLogNode()).info(msg);
	}
	
	public static void logDebug(String msg) {
		Core.getLogger(barcode.proxies.constants.Constants.getLogNode()).debug(msg);
	}
	
	public static void logTrace(String msg) {
		Core.getLogger(barcode.proxies.constants.Constants.getLogNode()).trace(msg);
	}
	
	public static void logError(String msg) {
		Core.getLogger(barcode.proxies.constants.Constants.getLogNode()).error(msg);
	}
	
	public static BitMatrix getBitMatrix(barcode.proxies.Barcode barcode) throws CoreException {
		logDebug("return correct barcode writer");
		Writer writer;
		BarcodeFormat format;
		BitMatrix bm = null;
		switch (barcode.getBarcodeFormat()) {
		case CODABAR:
			writer = new CodaBarWriter();
			format = BarcodeFormat.CODABAR;
			break;
		case CODE_128:
			writer = new Code128Writer();
			format = BarcodeFormat.CODE_128;
			break;
		case CODE_39:
			writer = new Code39Writer();
			format = BarcodeFormat.CODE_39;
			break;
		case CODE_93:
			writer = new Code93Writer();
			format = BarcodeFormat.CODE_93;
			break;
		case DATA_MATRIX:
			writer = new DataMatrixWriter();
			format = BarcodeFormat.DATA_MATRIX;
			break;
		case EAN_13:
			writer = new EAN13Writer();
			format = BarcodeFormat.EAN_13;
			break;
		case EAN_8:
			writer = new EAN8Writer();
			format = BarcodeFormat.EAN_8;
			break;
		case ITF:
			writer = new ITFWriter();
			format = BarcodeFormat.ITF;
			break;
		case QR_CODE:
			writer = new QRCodeWriter();
			format = BarcodeFormat.QR_CODE;
			break;
		case UPC_A:
			writer = new UPCAWriter();
			format = BarcodeFormat.UPC_A;
			break;
		case UPC_E:
			writer = new UPCEWriter();
			format = BarcodeFormat.UPC_E;
			break;
		case AZTEC:
			writer = new AztecWriter();
			format = BarcodeFormat.AZTEC;
			break;
		case PDF_417:
			writer = new PDF417Writer();
			format = BarcodeFormat.PDF_417;
			break;
		default:
			writer = new QRCodeWriter();
			format = BarcodeFormat.QR_CODE;
			break;
		}
		try {
			bm = writer.encode(barcode.getBarcodeContent(), format, getWidth(barcode),getHeight(barcode), getMap(barcode));
		} catch (Exception e) {
			logError(e.toString() + "\nStacktrace: " + ExceptionUtils.getFullStackTrace(e));
		}
		return bm;
	}
	
	public static Integer getWidth(barcode.proxies.Barcode barcode) throws CoreException  {
		int w,h;
		w = h = 200;
		if (barcode.getWidth() != null) w = barcode.getWidth().intValue();
		if (forceSquare(barcode)) {
			if (barcode.getHeight() != null) h = barcode.getHeight().intValue();
			return Math.max(w,h);
		} else {
			return w;
		}	
	}
	
	public static Integer getHeight(barcode.proxies.Barcode barcode) throws CoreException  {
		int w,h;
		w = h = 200;
		if (barcode.getHeight() != null) h = barcode.getHeight().intValue();
		if (forceSquare(barcode)) {
			if (barcode.getWidth() != null) w = barcode.getWidth().intValue();
			return Math.max(w,h);
		} else {
			return h;
		}	
	}
	
	public static Boolean forceSquare(barcode.proxies.Barcode barcode) throws CoreException {
		boolean fs = false;
		switch (barcode.getBarcodeFormat()) {
		case QR_CODE:
			fs = true;
			break;
		default:
			fs = false;
			break;
		}
		return fs;
	}
	
	public static Map<EncodeHintType, Object>  getMap(barcode.proxies.Barcode barcode) throws CoreException {
		Map<EncodeHintType, Object> hintMap = new EnumMap<EncodeHintType, Object>(EncodeHintType.class);
		setEncoding(barcode, hintMap);
		setErrorCorrectionLevel(barcode, hintMap);
		return hintMap;
	}
	
	public static void setEncoding(barcode.proxies.Barcode barcode, Map<EncodeHintType, Object> hintMap) {
		logDebug("setting encoding for barcode, default is UTF-8");
		switch (barcode.getEncoding()) {
		case UTF_8:
			hintMap.put(EncodeHintType.CHARACTER_SET, "UTF-8");
			logTrace("set encoding for barcode to UTF-8");
			break;
		case ISO_8859_1:
			hintMap.put(EncodeHintType.CHARACTER_SET, "ISO-8859-1");
			logTrace("set encoding for barcode to ISO-8859-1");
			break;
		case Shift_JIS:	
			hintMap.put(EncodeHintType.CHARACTER_SET, "Shift_JIS");
			logTrace("set encoding for barcode to Shift_JIS");
			break;
		default:
			hintMap.put(EncodeHintType.CHARACTER_SET, "UTF-8");
			logTrace("set encoding for barcode to UTF-8 [default]");
			break;
		}
	}
	
	public static void setErrorCorrectionLevel(barcode.proxies.Barcode barcode, Map<EncodeHintType, Object> hintMap) {
		logDebug("setting error correction for barcode, default is L");
		switch (barcode.getErrorCorrectionLevel()) {
		case L:
			hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);
			logTrace("set error correction for barcode to L");
			break;
		case H:
			hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);
			logTrace("set error correction for barcode to H");
			break;
		case M:
			hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.M);
			logTrace("set error correction for barcode to M");
			break;
		case Q:
			hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.Q);
			logTrace("set error correction for barcode to Q");
			break;
		case PDF417_AZTEC:
			hintMap.put(EncodeHintType.ERROR_CORRECTION, barcode.getErrorCorrection());
			logTrace("set error correction for barcode to PDF417/AZTEC");
			break;
		default:
			hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);
			logTrace("set error correction for barcode to L [Default]");
			break;
			
		}
	}
	
	private static String getFileType (barcode.proxies.Barcode barcode) throws CoreException {
		logDebug("getting filetype for barcode, default is png");
		switch (barcode.getImageType()) {
		case PNG:
			logTrace("set filetype to png");
			return "png";
		case GIF:
			logTrace("set filetype to gif");
			return "gif";
		case JPG:
			logTrace("set filetype to jpg");
			return "jpg";
		case TIFF:
			logTrace("set filetype to tiff");
			return "tiff";
		case JPEG:
			logTrace("set filetype to jpeg");
			return "jpeg";
		default:
			logTrace("set filetype to png [Default]");
			return "png";			
		}
	}
	
	private static Boolean allowTransparentBackground (barcode.proxies.Barcode barcode) throws CoreException {
		logDebug("determening if transparent background is allowed");
		switch (barcode.getImageType()) {
		case PNG:
			logTrace("set filetype to png");
			return true;
		case GIF:
			logTrace("set filetype to gif");
			return true;
		case JPG:
			logTrace("set filetype to jpg");
			return false;
		case TIFF:
			logTrace("set filetype to tiff");
			return true;
		case JPEG:
			logTrace("set filetype to jpeg");
			return false;
		default:
			logTrace("set filetype to png [Default]");
			return true;			
		}
	}
	// END EXTRA CODE
}
